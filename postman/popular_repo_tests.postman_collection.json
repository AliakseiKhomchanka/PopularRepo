{
	"info": {
		"_postman_id": "5c1e1d5a-9b10-45fb-82a8-01a44a39bed8",
		"name": "Popular Repo (Tests)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "tests",
			"item": [
				{
					"name": "Get popular repo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"popular\": {\"type\": \"boolean\"},\r",
									"        \"repo\": { \"type\": \"string\" },\r",
									"        \"score\": {\"type\": \"number\"},\r",
									"        \"status\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"popular\", \"repo\", \"score\", \"status\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"   pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct response body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.popular).to.eql(true);\r",
									"    pm.expect(jsonData.repo).to.eql(\"helm/charts\");\r",
									"    pm.expect(jsonData.status).to.eql(\"found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_endpoint}}/repos/popularity/:owner/:repo",
							"host": [
								"{{api_endpoint}}"
							],
							"path": [
								"repos",
								"popularity",
								":owner",
								":repo"
							],
							"variable": [
								{
									"key": "owner",
									"value": "helm"
								},
								{
									"key": "repo",
									"value": "charts"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get unpopular repo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"popular\": {\"type\": \"boolean\"},\r",
									"        \"repo\": { \"type\": \"string\" },\r",
									"        \"score\": {\"type\": \"number\"},\r",
									"        \"status\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"popular\", \"repo\", \"score\", \"status\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"   pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct response body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.popular).to.eql(false);\r",
									"    pm.expect(jsonData.repo).to.eql(\"AliakseiKhomchanka/PopularRepo\");\r",
									"    pm.expect(jsonData.status).to.eql(\"found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_endpoint}}/repos/popularity/:owner/:repo",
							"host": [
								"{{api_endpoint}}"
							],
							"path": [
								"repos",
								"popularity",
								":owner",
								":repo"
							],
							"variable": [
								{
									"key": "owner",
									"value": "AliakseiKhomchanka"
								},
								{
									"key": "repo",
									"value": "PopularRepo"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Repo not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"repo\": { \"type\": \"string\" },\r",
									"        \"status\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"repo\", \"status\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"   pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct response body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.repo).to.eql(\"this-repo/does-not-exist\");\r",
									"    pm.expect(jsonData.status).to.eql(\"not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_endpoint}}/repos/popularity/:owner/:repo",
							"host": [
								"{{api_endpoint}}"
							],
							"path": [
								"repos",
								"popularity",
								":owner",
								":repo"
							],
							"variable": [
								{
									"key": "owner",
									"value": "this-repo"
								},
								{
									"key": "repo",
									"value": "does-not-exist"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "api_endpoint",
			"value": "localhost:5000"
		}
	]
}